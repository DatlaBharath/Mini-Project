{
  "language": "Solidity",
  "sources": {
    "contracts/Ebv.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\ncontract Ebv {\r\n    // user Object Create chestadha Account create Chesinpidu deni Object lo store Avutdhi\r\n    struct user {\r\n        string name;\r\n        address add;\r\n    }\r\n    // Document Object Create chestadha Document Uplode Chesinpidu deni Object lo store Avutdhi\r\n    struct document{\r\n        string docName;\r\n        string docId; \r\n    }\r\n    // Endulo andari push chesina documents Hash untai. verify ipoinvatiki true avanivatiki false\r\n    struct verifyStat{\r\n        bytes32 hashValue;\r\n        bool status;\r\n    }\r\n    \r\n    mapping(address => document[]) public userData; // Ex: userData[siva' metamask  Address] = shiva uplode chesina ani documents objects oka array estadi\r\n    \r\n    // edhi pi ex lo chesina pani chestadhi address estam vathi docuuments estadhi\r\n    function getArray(address _address) public view returns(document[] memory){\r\n        return userData[_address];\r\n    }\r\n\r\n    address immutable public i_owner;\r\n    string public i_ownerName = \"bharath\";\r\n    // string ipfsHash;\r\n    user[] public candidate; // indhulo candidate usernames and address untai\r\n    user[] public recruiter; // indhulo recruiter usernames and address untai\r\n    bytes32[] public arrHash; // owner uplode chesina hashes untai\r\n    verifyStat[] public VerifiedHash; // verifyStats taluka Objects untai so user owner ki push cheste indulo store avutai\r\n\r\n    constructor() {\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    // \"user[] public candidate\" indulo ki user object push avutdhi user register iyinapudu \r\n    function addCandidateUser(string memory _username,address _address) public{\r\n        uint check = 0;\r\n        for(uint256 i=0;i<candidate.length;i++){\r\n            if(candidate[i].add == _address){\r\n                check = 1;\r\n            }\r\n        }\r\n        if(check == 0){\r\n            candidate.push(user(_username,_address));\r\n        }\r\n    }\r\n    // \"user[] public recruiter\" indulo ki user object push avutdhi user register iyinapudu\r\n    function addRecruiterUser(string memory _username,address _address) public{\r\n        uint check = 0;\r\n        for(uint256 i=0;i<candidate.length;i++){\r\n            if(candidate[i].add == _address){\r\n                check = 1;\r\n            }\r\n        }\r\n        if(check == 0){\r\n            recruiter.push(user(_username,_address));\r\n        }\r\n    }\r\n\r\n    // candidate login validation\r\n    function candidateValidate(string memory _username,address _address) public view returns(bool){\r\n        for(uint256 i=0;i<candidate.length;i++){\r\n            if(candidate[i].add == _address){\r\n                return keccak256(abi.encodePacked(candidate[i].name)) == keccak256(abi.encodePacked(_username));\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Recruiter login Validation\r\n    function recruiterValidate(string memory _username,address _address) public view returns(bool){\r\n        for(uint256 i=0;i<recruiter.length;i++){\r\n            if(recruiter[i].add == _address){\r\n                return keccak256(abi.encodePacked(recruiter[i].name)) == keccak256(abi.encodePacked(_username));\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // uploding the candidate document into this \"userData[msg.sender]\"\r\n    function uplodeCandidateDocument(string memory _docName, string memory _docId) public{\r\n        userData[msg.sender].push(document(_docName,_docId));\r\n    }\r\n\r\n    // storing user document hash into \"VerifiedHash\" with verification status false\r\n    function documentPush(string memory _docName) public{\r\n        for(uint256 i=0;i<userData[msg.sender].length;i++){\r\n            if (keccak256(abi.encodePacked(userData[msg.sender][i].docName)) == keccak256(abi.encodePacked(_docName))){\r\n                VerifiedHash.push(verifyStat(keccak256(abi.encode(userData[msg.sender][i])),false));\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // owner document hash edhi use chesi push chestadu which is used for verification\r\n    function hashArray(string memory _docName,string memory _docId) public ownerPower{\r\n        document memory doc = document(_docName,_docId);\r\n        arrHash.push(keccak256(abi.encode(doc)));\r\n    }\r\n\r\n    // Document verification of document pushed by user\r\n    function hashVerify(uint index) public {\r\n        for(uint256 i=0;i<arrHash.length;i++){\r\n            if(arrHash[i] == VerifiedHash[index].hashValue){\r\n                VerifiedHash[index].status = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // owner login validation\r\n    function ownerValidate(string memory _username,address _address) public view returns(bool){\r\n        if(i_owner == _address){\r\n            return keccak256(abi.encodePacked(i_ownerName)) == keccak256(abi.encodePacked(_username));\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // user verified documents retrival\r\n    function getVerifiedDocuments(address _address) public view returns (document[] memory) {\r\n        document[] memory k = getArray(_address);\r\n        document[] memory l = new document[](k.length);\r\n        uint lIndex = 0;\r\n        uint t = 0;\r\n        for (uint i = 0; i < k.length; i++) {\r\n            for (uint j = 0; j < VerifiedHash.length; j++) {\r\n                if (VerifiedHash[j].hashValue == keccak256(abi.encode(k[i])) && VerifiedHash[j].status == true) {\r\n                    t = 1;\r\n                    break;\r\n                }\r\n            }\r\n            if (t == 1) {\r\n                    l[lIndex] = k[i];\r\n                    lIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(l, lIndex)\r\n        }\r\n        return l;\r\n    }\r\n\r\n    // user documents which not verified retrival\r\n    function getNonVerifiedDocuments(address _address) public view returns(document[] memory){\r\n        document[] memory k = getArray(_address);\r\n        document[] memory l = new document[](k.length);\r\n        uint lIndex = 0;\r\n        uint t = 0;\r\n        for (uint i = 0; i < k.length; i++) {\r\n            t = 0;\r\n            for (uint j = 0; j < VerifiedHash.length; j++) {\r\n                if (VerifiedHash[j].hashValue == keccak256(abi.encode(k[i])) && VerifiedHash[j].status == true) {\r\n                    t = 1;\r\n                }\r\n            }\r\n            if (t == 0) {\r\n                    l[lIndex] = k[i];\r\n                    lIndex++;\r\n            }\r\n        }\r\n        assembly {\r\n            mstore(l, lIndex)\r\n        }\r\n        return l;\r\n    }\r\n\r\n    // user document which are pushed and not verified\r\n    function getToBeVerified() public view returns(bytes32[] memory){\r\n        bytes32[] memory l = new bytes32[](VerifiedHash.length);\r\n        uint lIndex = 0;\r\n        for (uint i = 0; i < VerifiedHash.length; i++) {\r\n            if (!VerifiedHash[i].status) {\r\n                    l[lIndex] = VerifiedHash[i].hashValue;\r\n                    lIndex++;\r\n            }\r\n        }\r\n        return l;\r\n    }\r\n    // function storePDF(string memory _ipfsHash) public {\r\n    //     ipfsHash = _ipfsHash;\r\n    // }\r\n    \r\n    // function getPDF() public view returns (string memory) {\r\n    //     return ipfsHash;\r\n    // }\r\n\r\n    // ignore this\r\n    modifier ownerPower(){\r\n        if(msg.sender == i_owner){_;}\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}